;
; Copyright (c) 2024 No0ne (https://github.com/No0ne)
;
; SPDX-License-Identifier: MIT
;

.program macphy
.side_set 1 opt pindirs

restart:
  set    pins, 1         side 0     // set clock high and data to input
  wait   0 pin, 0                   // wait for data being pulled low

receive:
  set    x, 7                       // number of bits to read in

receiveloop:
  set    pins, 0                    // set clock low
  in     pins, 1                    // read in data
  set    pins, 1                    // set clock high
  jmp    x--, receiveloop           // loop until x = 0

  jmp    !osre, send                // see if we have data to send
  jmp    restart                    // no data to send, restart

send:                               // number of bits to write out
  set    x, 7            side 1     // and set data to output

sendloop:
  set    pins, 0                    // set clock low
  out    pins, 1                    // write out data
  set    pins, 1                    // set clock high
  jmp    x--, sendloop              // loop until x = 0

% c-sdk {
  void macphy_program_init(PIO pio, uint sm, uint offset, uint dat) {
    pio_sm_config c = macphy_program_get_default_config(offset);
    
    u8 clk = dat + 1;
    pio_gpio_init(pio, clk);
    pio_gpio_init(pio, dat);
    
    sm_config_set_clkdiv(&c, 15360);
    sm_config_set_jmp_pin(&c, clk);
    sm_config_set_set_pins(&c, clk, 1);
    sm_config_set_sideset_pins(&c, dat);
    sm_config_set_out_pins(&c, dat, 1);
    sm_config_set_out_shift(&c, false, true, 8);
    sm_config_set_in_pins(&c, dat);
    sm_config_set_in_shift(&c, false, true, 8);
    
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_consecutive_pindirs(pio, sm, dat, 2, true);
    pio_sm_set_enabled(pio, sm, true);
  }
%}